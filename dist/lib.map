{"version":3,"sources":["FIR.ts","pascal-triangle.ts","gaussian-blur.ts","scale-linear.ts","perlin-noise.ts","index.ts"],"names":[],"mappings":"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","file":"lib.map","sourceRoot":"../src","sourcesContent":["import { Vec2 } from './types';\n\n/**\n * Performs a frequency filtration across a provided streamed in signal.\n * This filter can be adjusted via the seed values provided.\n */\nexport class FIRFilter {\n  coefficients: number[];\n  filter: number[];\n\n  /**\n   * The seed values work in tuples [FIR filter coefficient, starting bias];\n   * When normalize is activated, the seed values are normalized to the provided value.\n   * When normalize is a value of 1, this behaves like a low pass FIR filter.\n   */\n  constructor(seedValues: Vec2[], normalize?: number) {\n    this.coefficients = seedValues.map(seed => seed[0]);\n    this.filter = seedValues.map(seed => seed[1]);\n\n    if (normalize !== undefined) {\n      let total = 0;\n      this.coefficients.forEach(c => (total += c));\n      this.coefficients = this.coefficients.map(\n        value => (value / total) * normalize\n      );\n    }\n  }\n\n  /**\n   * Reset the filter to have all of it's filter values set to the provided value\n   */\n  reset(value: number) {\n    this.filter = this.filter.map(() => value);\n  }\n\n  /**\n   * This streams in a value into the filter and outputs the next computed value\n   */\n  stream(value: number) {\n    let out = 0;\n    this.filter.pop();\n    this.filter.unshift(value);\n\n    for (let i = 0, end = this.coefficients.length; i < end; ++i) {\n      out += this.coefficients[i] * this.filter[i];\n    }\n\n    this.filter.shift();\n    this.filter.unshift(out);\n\n    return out;\n  }\n\n  /**\n   * Runs a list of values through the filter and returns an array of each step\n   */\n  run(start: number, values: number[]) {\n    const current = this.filter.slice(0);\n    const toProcess = values.slice(0);\n    this.reset(start);\n    const out: number[] = [];\n\n    while (toProcess.length > 0) {\n      out.push(this.stream(toProcess.shift() || 0));\n    }\n\n    // Reset the filter back to where it was\n    this.filter = current;\n\n    return out;\n  }\n}\n","export class PascalTriangle {\n  /** Contains the triangles elements [[1], [1, 1], [1, 2, 1], etc] */\n  elements: number[][];\n\n  constructor(levels: number) {\n    if (levels === 0) return;\n    const elements: number[][] = [[1]];\n    const _levels = levels - 1;\n\n    // i will be the index pointing to the previous row\n    for (let i = 0; i < _levels; ++i) {\n      const previous = elements[i];\n      const row = [1];\n\n      for (let k = 0, endk = previous.length - 1; k < endk; ++k) {\n        row.push(previous[k] + previous[k + 1]);\n      }\n\n      row.push(1);\n      elements.push(row);\n    }\n\n    this.elements = elements;\n  }\n\n  /**\n   * Tries to generate a gaussian kernal based on the pascal triangle where the kernal has so many elements\n   * To get a higher quality kernal trim off the ends of the triangle's row but keep the kernal number.\n   * This causes a deeper triangle to be calculated.\n   */\n  gaussianKernal(size: number, trim: number) {\n    const toTrim = trim * 2;\n    let row: number[] = [];\n\n    // Loop until we hit a row with enough elements to make the kernal\n    for (\n      let i = 0, end = this.elements.length;\n      i < end && this.elements[i].length - toTrim <= size;\n      ++i\n    ) {\n      row = this.elements[i];\n    }\n\n    // Make sure the elements matches the requested elements size exactly\n    if (row.length - toTrim !== size) {\n      console.warn(\n        'Error in pascal triangle gaussian kernal',\n        'Requested size',\n        size,\n        'Row',\n        row,\n        'Trim amount',\n        trim,\n        'Elements',\n        this.elements\n      );\n    }\n\n    // Copy and remove trimed elements\n    let kernal = row.slice(trim, row.length - trim);\n    // Get the new total of the row\n    const total = kernal.reduce((prev, next) => next + prev, 0);\n    // Normalize the kernal\n    kernal = kernal.map(value => value / total);\n\n    return {\n      kernal,\n      total,\n    };\n  }\n}\n","import { PascalTriangle } from './pascal-triangle';\n\nexport interface IGaussianBlurOptions {\n  /** Number of samples taken per data slot */\n  kernalSize: number;\n  /** Number of times the blur is applied */\n  passes: number;\n}\n\nconst { min, max } = Math;\n\nfunction clamp(val: number, minVal: number, maxVal: number) {\n  return max(min(val, maxVal), minVal);\n}\n\n/**\n * Performs a gaussian blur on a set of numerical data.\n */\nexport class GaussianBlur {\n  // This is a blur kernal used for blending\n  private kernal: number[];\n  // These are the options for the blur operation\n  options: IGaussianBlurOptions;\n\n  constructor(options: IGaussianBlurOptions) {\n    this.options = options;\n    this.update(options);\n  }\n\n  /**\n   * Applies the blur to the input data, returns a blurred version without affecting the source.\n   */\n  generate(\n    data: number[][],\n    offsetLeft: number = 0,\n    offsetTop: number = 0,\n    offsetRight: number = 0,\n    offsetBottom: number = 0\n  ) {\n    if (!data || !data[0] || !data[0].length) return data;\n\n    const { passes } = this.options;\n    const kernal = this.kernal;\n    const outPass = data.map(col => col.slice(0));\n    const width = data.length;\n    const height = data[0].length;\n\n    const offsets: { [key: number]: number[] } = {\n      1: [0],\n      3: [-1, 0, 1],\n      5: [-2, -1, 0, 1, 2],\n      7: [-3, -2, -1, 0, 1, 2, 3],\n      9: [-4, -3, -2, -1, 0, 1, 2, 3, 4],\n    };\n    const offset = offsets[kernal.length];\n\n    if (!offset) {\n      console.warn('No offset suitable for kernal size');\n      return data;\n    }\n\n    // Instantiate our vertical pass so we don't recreate every pass\n    const verticalPass: number[][] = [];\n    for (let x = 0; x < width; ++x) {\n      verticalPass.push([]);\n    }\n\n    for (let blurCount = 0; blurCount < passes; ++blurCount) {\n      // After the octaves have been loaded in, we can blur filter the result\n      let value;\n      let sample;\n\n      // Vertical Gaussian blur pass\n      for (let x = offsetLeft, endx = width - offsetRight; x < endx; ++x) {\n        const outCol = verticalPass[x];\n        const inCol = outPass[x];\n\n        for (let y = offsetTop, endy = height - offsetBottom; y < endy; ++y) {\n          value = 0;\n\n          for (let k = 0, endk = kernal.length; k < endk; ++k) {\n            sample = clamp(y + offset[k], 0, endy - 1);\n            value += (inCol[sample] || 0) * kernal[k];\n          }\n\n          outCol[y] = value;\n        }\n      }\n\n      // Horizontal Gaussian blur into our perlin data\n      for (let x = offsetLeft, endx = width - offsetRight; x < endx; ++x) {\n        const outCol = outPass[x];\n\n        for (let y = offsetTop, endy = height - offsetBottom; y < endy; ++y) {\n          value = 0;\n\n          for (let k = 0, endk = kernal.length; k < endk; ++k) {\n            sample = clamp(x + offset[k], 0, endx - 1);\n            value += ((verticalPass[sample] || [])[y] || 0) * kernal[k];\n          }\n\n          outCol[y] = value;\n        }\n      }\n    }\n\n    return outPass;\n  }\n\n  update(options: Partial<IGaussianBlurOptions>) {\n    Object.assign(this.options, options);\n\n    if (options.kernalSize) {\n      // This is a blur kernal that will be used for sampling the zoomed in octaves\n      this.kernal = new PascalTriangle(15).gaussianKernal(\n        options.kernalSize,\n        2\n      ).kernal;\n    }\n  }\n}\n","import { Vec2 } from './types';\n\nexport function scaleLinear(domain: Vec2, range: Vec2) {\n  return function(x: number) {\n    return (\n      ((x - domain[0]) / (domain[1] - domain[0])) *\n      (range[1] - range[0] + range[0])\n    );\n  };\n}\n","import { GaussianBlur } from './gaussian-blur';\nimport { scaleLinear } from './scale-linear';\nimport { Vec2 } from './types';\n\nconst { abs, floor, max, min, random } = Math;\n\nexport interface IPerlinOptions {\n  /** Output width */\n  width: number;\n  /** Output height */\n  height: number;\n  /** The amount of blurring to apply to the combined octaves */\n  blendPasses: number;\n  /**\n   * An octave is the start of perlin noise with a gaussian noise map. Each octave should be smaller\n   * than the end result. The octave is then scaled up then averaged with the\n   * other octaves. Octaves closer to the output size creates greater detail in regions, while\n   * octaves that are smaller creates larger features.\n   *\n   * Octaves are in the format [width, height]\n   */\n  octaves: Vec2[];\n  /**\n   * This sets the values that should appear within the perlin dataset.\n   */\n  valueRange: Vec2;\n}\n\n/**\n * This generates a 2d plane of perlin noise that is gray scale with values\n * that are 0 - 1.\n */\nexport class PerlinNoise {\n  /** The blurring kernal used to blur the data */\n  private blur: GaussianBlur;\n  /** The perlin data with values 0 - 1 */\n  data: number[][];\n  /** Used for debug rendering the output */\n  private debugContext: HTMLCanvasElement;\n  /** The options used to construct the data */\n  options: IPerlinOptions;\n\n  get width() {\n    return this.options.width;\n  }\n\n  get height() {\n    return this.options.height;\n  }\n\n  /**\n   * Provide the output size, and the size of the octaves generated.\n   */\n  constructor(options: IPerlinOptions) {\n    this.options = options;\n    this.blur = new GaussianBlur({\n      passes: options.blendPasses,\n      kernalSize: 9,\n    });\n\n    this.update(options);\n  }\n\n  /**\n   * Generates a new perlin dataset\n   */\n  async generate() {\n    const { width, height, octaves, valueRange } = this.options;\n    // This will contain the end perlin result\n    let perlin: number[][] = [];\n\n    // Loop through each octave and multiply it into the perlin output\n    octaves.forEach(octave => {\n      // Start with a smaller sized map of pure gray scale noise\n      const small: number[][] = [];\n      const smallWidth = octave[0];\n      const smallHeight = octave[1];\n      const scaleX = scaleLinear([0, width], [0, smallWidth]);\n      const scaleY = scaleLinear([0, height], [0, smallHeight]);\n\n      // Make the octave base\n      for (let x = 0; x < smallWidth; ++x) {\n        const col: number[] = [];\n        small.push(col);\n\n        for (let y = 0; y < smallHeight; ++y) {\n          col.push(random());\n        }\n      }\n\n      // Sample the octave into the size of the output perlin image\n      for (let x = 0; x < width; ++x) {\n        const col = (perlin[x] = perlin[x] || []);\n\n        for (let y = 0; y < height; ++y) {\n          col[y] = (col[y] || 1) * small[floor(scaleX(x))][floor(scaleY(y))];\n        }\n      }\n    });\n\n    // Run through the perlin noise data with our blur filter\n    perlin = this.blur.generate(perlin);\n\n    // We now normalize the ranges to keep details brighter\n    // We also make the data within each cell reflect the data range\n    // that is specified\n    let maxVal = -1;\n    const range = valueRange[1] - valueRange[0];\n    const base = valueRange[0];\n\n    for (let x = 0; x < width; ++x) {\n      const col = perlin[x];\n\n      for (let y = 0; y < height; ++y) {\n        // First brigten up darkened areas\n        // perlin[x][y] *= 1 / (perlin[x][y] + 1);\n        // Now get the max value\n        maxVal = max(col[y], maxVal);\n      }\n    }\n\n    for (let x = 0; x < width; ++x) {\n      const col = perlin[x];\n\n      for (let y = 0; y < height; ++y) {\n        col[y] /= maxVal;\n        col[y] = col[y] * range + base;\n      }\n    }\n\n    this.data = perlin;\n  }\n\n  /**\n   * Will just ensure the data object is populated with a generation.\n   */\n  async generateOnce() {\n    if (!this.data) {\n      await this.generate();\n    }\n  }\n\n  /**\n   * Retrieves a rectangular sample from the perlin data.\n   * If a threshold is included, absolute values below it will be zero'ed out.\n   */\n  sample(\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    threshold?: number\n  ) {\n    const out: number[][] = [];\n\n    if (threshold) {\n      for (let i = x, end = min(this.data.length, x + width); i < end; ++i) {\n        out.push(\n          this.data[i]\n            .slice(y, y + height)\n            .map(value => (abs(value) > threshold ? value : 0))\n        );\n      }\n    } else {\n      for (let i = x, end = min(this.data.length, x + width); i < end; ++i) {\n        out.push(this.data[i].slice(y, y + height));\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Update the options for the noise generation.\n   */\n  update(options: Partial<IPerlinOptions>) {\n    Object.assign(this.options, options);\n\n    if (options.blendPasses) {\n      this.blur.update({\n        passes: options.blendPasses,\n      });\n    }\n  }\n\n  /**\n   * Renders a canvas on the screen showing the generated output.\n   */\n  debug(threshold: number = 0, clear?: boolean) {\n    if (clear) {\n      if (this.debugContext) {\n        this.debugContext.remove();\n      }\n      return;\n    }\n\n    const canvas = document.createElement('canvas').getContext('2d');\n\n    if (canvas) {\n      const { valueRange } = this.options;\n      const element = canvas.canvas;\n      document.getElementsByTagName('body')[0].appendChild(canvas.canvas);\n      const width = (element.width = this.data.length);\n      const height = (element.height = this.data[0].length);\n      const data = canvas.getImageData(0, 0, width, height);\n      let index = 0;\n      const range = valueRange[1] - valueRange[0];\n      const base = valueRange[0];\n\n      if (threshold) {\n        for (let x = 0, end = this.data.length; x < end; ++x) {\n          const col = this.data[x];\n\n          for (let y = 0, endy = col.length; y < endy; ++y) {\n            const val = 255 * (abs(col[y]) > threshold ? 1 : 0);\n            data.data[index * 4] = val;\n            data.data[index * 4 + 1] = val;\n            data.data[index * 4 + 2] = val;\n            data.data[index * 4 + 3] = 255;\n            index++;\n          }\n        }\n      } else {\n        for (let x = 0, end = this.data.length; x < end; ++x) {\n          const col = this.data[x];\n\n          for (let y = 0, endy = col.length; y < endy; ++y) {\n            const val = 255 * ((col[y] - base) / range);\n            data.data[index * 4] = val;\n            data.data[index * 4 + 1] = val;\n            data.data[index * 4 + 2] = val;\n            data.data[index * 4 + 3] = 255;\n            index++;\n          }\n        }\n      }\n\n      canvas.putImageData(data, 0, 0);\n      element.style.position = 'fixed';\n      element.style.top = '0px';\n      element.style.left = '0px';\n      element.style.zIndex = '9999';\n\n      this.debugContext = element;\n    }\n  }\n}\n","export * from './FIR';\nexport * from './gaussian-blur';\nexport * from './pascal-triangle';\nexport * from './perlin-noise';\nexport * from './types';\n"]}